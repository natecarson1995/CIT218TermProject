// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TermProject.Data;

namespace TermProject.Migrations
{
    [DbContext(typeof(ShortStoryContext))]
    [Migration("20211213184450_CommentReactions2")]
    partial class CommentReactions2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TermProject.Models.Comment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortStoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ShortStoryID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = "c21eb9b3-76f6-4f55-855d-75be430ecaed",
                            Author = "System",
                            Content = "Comment on short story #1",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(3674),
                            ShortStoryID = "3a2ddc80-c28f-420d-90b1-f950e907f734"
                        },
                        new
                        {
                            ID = "508b05d9-1165-4ea3-aacd-d82e02798ab0",
                            Author = "System",
                            Content = "Comment on short story #2",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(4698),
                            ShortStoryID = "437c0cf1-ecb9-414e-8826-3161797eafee"
                        },
                        new
                        {
                            ID = "a956c7fe-ba2f-4d81-ba13-1fa29618f1d5",
                            Author = "System",
                            Content = "Comment on short story #3",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(4749),
                            ShortStoryID = "0f3cd69e-cb7b-4474-8c2b-fcc61c31615b"
                        },
                        new
                        {
                            ID = "d9ffa0d5-3035-44d1-9310-9ea6f2092ee6",
                            Author = "System",
                            Content = "Comment on short story #4",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(4755),
                            ShortStoryID = "7d422612-77c7-4a9f-84ab-cb64dee0ef59"
                        });
                });

            modelBuilder.Entity("TermProject.Models.CommentReaction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("TermProject.Models.ShortStory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("ID");

                    b.ToTable("ShortStories");

                    b.HasData(
                        new
                        {
                            ID = "3a2ddc80-c28f-420d-90b1-f950e907f734",
                            Author = "System",
                            Content = "Content for short story #1",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 295, DateTimeKind.Local).AddTicks(8151),
                            Title = "Short story #1"
                        },
                        new
                        {
                            ID = "437c0cf1-ecb9-414e-8826-3161797eafee",
                            Author = "System",
                            Content = "Content for short story #2",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(2544),
                            Title = "Short story #2"
                        },
                        new
                        {
                            ID = "0f3cd69e-cb7b-4474-8c2b-fcc61c31615b",
                            Author = "System",
                            Content = "Content for short story #3",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(2591),
                            Title = "Short story #3"
                        },
                        new
                        {
                            ID = "7d422612-77c7-4a9f-84ab-cb64dee0ef59",
                            Author = "System",
                            Content = "Content for short story #4",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 44, 50, 298, DateTimeKind.Local).AddTicks(2599),
                            Title = "Short story #4"
                        });
                });

            modelBuilder.Entity("TermProject.Models.ShortStoryReaction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<string>("ShortStoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ShortStoryID");

                    b.ToTable("ShortStoryReactions");
                });

            modelBuilder.Entity("TermProject.Models.Comment", b =>
                {
                    b.HasOne("TermProject.Models.ShortStory", null)
                        .WithMany("Comments")
                        .HasForeignKey("ShortStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TermProject.Models.CommentReaction", b =>
                {
                    b.HasOne("TermProject.Models.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TermProject.Models.ShortStoryReaction", b =>
                {
                    b.HasOne("TermProject.Models.ShortStory", "ShortStory")
                        .WithMany("Reactions")
                        .HasForeignKey("ShortStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
