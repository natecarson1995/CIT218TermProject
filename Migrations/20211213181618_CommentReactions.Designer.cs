// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TermProject.Data;

namespace TermProject.Migrations
{
    [DbContext(typeof(ShortStoryContext))]
    [Migration("20211213181618_CommentReactions")]
    partial class CommentReactions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TermProject.Models.Comment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortStoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ShortStoryID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = "2b0b2c64-2ded-47f8-9fd4-f82d50c8e9df",
                            Author = "System",
                            Content = "Comment on short story #1",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(6740),
                            ShortStoryID = "a5ed9673-4c76-4a78-90a8-3474c1978b50"
                        },
                        new
                        {
                            ID = "53f6faeb-b4fc-47ae-b912-9c4cb0b7757f",
                            Author = "System",
                            Content = "Comment on short story #2",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(7800),
                            ShortStoryID = "27c54a83-6848-4da4-bd91-7a8b54c29bda"
                        },
                        new
                        {
                            ID = "c1d05497-f47d-4a3e-b6f3-6272a597e543",
                            Author = "System",
                            Content = "Comment on short story #3",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(7847),
                            ShortStoryID = "bb7828f9-4568-47bb-84ed-5730601c5589"
                        },
                        new
                        {
                            ID = "1a05f3aa-5859-41cc-9aef-f3f9e5a32456",
                            Author = "System",
                            Content = "Comment on short story #4",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(7854),
                            ShortStoryID = "934e1f3e-8ab9-45e6-a9bf-6f69dd5852b7"
                        });
                });

            modelBuilder.Entity("TermProject.Models.CommentReaction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("TermProject.Models.ShortStory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("ID");

                    b.ToTable("ShortStories");

                    b.HasData(
                        new
                        {
                            ID = "a5ed9673-4c76-4a78-90a8-3474c1978b50",
                            Author = "System",
                            Content = "Content for short story #1",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 548, DateTimeKind.Local).AddTicks(305),
                            Title = "Short story #1"
                        },
                        new
                        {
                            ID = "27c54a83-6848-4da4-bd91-7a8b54c29bda",
                            Author = "System",
                            Content = "Content for short story #2",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(5513),
                            Title = "Short story #2"
                        },
                        new
                        {
                            ID = "bb7828f9-4568-47bb-84ed-5730601c5589",
                            Author = "System",
                            Content = "Content for short story #3",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(5604),
                            Title = "Short story #3"
                        },
                        new
                        {
                            ID = "934e1f3e-8ab9-45e6-a9bf-6f69dd5852b7",
                            Author = "System",
                            Content = "Content for short story #4",
                            CreatedAt = new DateTime(2021, 12, 13, 13, 16, 18, 550, DateTimeKind.Local).AddTicks(5613),
                            Title = "Short story #4"
                        });
                });

            modelBuilder.Entity("TermProject.Models.ShortStoryReaction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<string>("ShortStoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ShortStoryID");

                    b.ToTable("ShortStoryReactions");
                });

            modelBuilder.Entity("TermProject.Models.Comment", b =>
                {
                    b.HasOne("TermProject.Models.ShortStory", null)
                        .WithMany("Comments")
                        .HasForeignKey("ShortStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TermProject.Models.CommentReaction", b =>
                {
                    b.HasOne("TermProject.Models.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TermProject.Models.ShortStoryReaction", b =>
                {
                    b.HasOne("TermProject.Models.ShortStory", "ShortStory")
                        .WithMany("Reactions")
                        .HasForeignKey("ShortStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
